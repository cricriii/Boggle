Solve a word search puzzle.
Given a list of distinct, lowercase words and a two-dimensional board
composed of M x N cells – not necessarily forming a square – the task is
to identify the words from the provided list that can be formed by
traversing adjacent characters on the board.
Each cell on the board contains a single, lowercase character. A
character is considered adjacent if it is horizontally, vertically, or
diagonally neighboring, implying eight possible cells around a given one,
as well as the cell itself, forming a total of nine possibilities and allowing
the creation of loops.
Note that a character (a cell) can be visited multiple times within a
word.
The objective is to identify, if present, all occurrences of the given
words that can be formed using the defined adjacency rule, and to
output these words and their corresponding paths in lexicographical
order.
A text file will be supplied to your program as its first argument,
denoted as args[0] in the main method signature. The file will
adhere to the following format:
● The first line contains two integers, M and N, indicating the
number of rows and columns on the board, respectively.
● The subsequent M lines depict the board, with each character
representing a cell and separated by spaces.
● The line following the board representation contains the list of
words, each separated by a space.
For each problem consisting of a board and a list of words, print
the solutions. Begin by specifying which query’s solution is being
printed on the first line, e.g., " Query 1: ". Note the word “ Query ”
with an uppercase ‘ Q ’; a space after the word “ Query ”; the query
number starting at 1; and, a colon following the query number (no space
after the number) followed immediately by a newline (no space after ,
‘ \n ’. Each problem should be represented as a list of Strings, with each
entry having the following format:
<word><one-space><path>
<word> : Represents a discovered word that also exists in the
provided list.
<path> : Represents the path at which this word occurs in the
given board. If you move from position (i,j) on the board to
position (i’,j’) , this move should be added to the current path as
(i,j)->(i’,j’) . Here, i and j are 0-based indices representing the
row and column number, respectively. Note there is no space between i ,
‘ , ’, and j .
Again, the solutions for each problem should be printed in
lexicographic order.
